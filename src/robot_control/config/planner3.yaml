controller_frequency: 3.0
recovery_behavior_enabled: false
rotate_recovery: false
conservative_reset_dist: 0.1

GlobalPlanner:                                  # Also see: http://wiki.ros.org/global_planner
  old_navfn_behavior: false                     # Exactly mirror behavior of navfn, use defaults for other boolean parameters, default false
  use_quadratic: true                           # Use the quadratic approximation of the potential. Otherwise, use a simpler calculation, default true
  use_dijkstra: true                            # Use dijkstra's algorithm. Otherwise, A*, default true
  use_grid_path: false                          # Create a path that follows the grid boundaries. Otherwise, use a gradient descent method, default false
  
  allow_unknown: true                           # Allow planner to plan through unknown space, default true
                                                #Needs to have track_unknown_space: true in the obstacle / voxel layer (in costmap_commons_param) to work
  planner_window_x: 3.0                         # default 0.0
  planner_window_y: 3.0                         # default 0.0
  default_tolerance: 0.5                        # If goal in obstacle, plan to the closest point in radius default_tolerance, default 0.0
  
  publish_scale: 100                            # Scale by which the published potential gets multiplied, default 100
  planner_costmap_publish_frequency: 0.0        # default 0.0
  
  lethal_cost: 253                              # default 253
  neutral_cost: 66 #66                             # default 50
  cost_factor: 3.0                              # 0.2 Factor to multiply each cost from costmap by, default 3.0
  publish_potential: true                       # Publish Potential Costmap (this is not like the navfn pointcloud2 potential), default true
  visualize_potential: true

# DWAPlannerROS:

# # Robot Configuration Parameters - Kobuki

#   controller_frequency: 15.0

#   max_vel_x: 0.2  # 0.55
#   min_vel_x: 0.1 

#   max_vel_y: 0.0  # diff drive robot
#   min_vel_y: 0.0  # diff drive robot

#   max_vel_trans: 0.2 # choose slightly less than the base's capability
#   min_vel_trans: 0.1  # this is the min trans velocity when there is negligible rotational velocity
#   trans_stopped_vel: 0.1

#   # Warning!
#   #   do not set min_trans_vel to 0.0 otherwise dwa will always think translational velocities
#   #   are non-negligible and small in place rotational velocities will be created.

#   max_vel_theta: 0.2  # choose slightly less than the base's capability
#   min_vel_theta: 0.05  # this is the min angular velocity when there is negligible translational velocity
#   theta_stopped_vel: 0.05
  
#   acc_lim_x: 10.0 # maximum is theoretically 2.0, but we 
#   acc_lim_theta: 10.0
#   acc_lim_y: 0.0      # diff drive robot

# # Goal Tolerance Parameters
#   yaw_goal_tolerance: 0.3  # 0.05
#   xy_goal_tolerance: 0.15  # 0.10
#   # latch_xy_goal_tolerance: false

# # Forward Simulation Parameters
#   sim_time: 2.0       # 1.7
#   vx_samples: 15       # 3
#   vy_samples: 0       # diff drive robot, there is only one sample
#   vtheta_samples: 40  # 20
#   sim_granularity: 0.2

# # Trajectory Scoring Parameters
#   path_distance_bias: 32.0      # 32.0   - weighting for how much it should stick to the global path plan
#   goal_distance_bias: 20.0      # 24.0   - wighting for how much it should attempt to reach its goal
#   occdist_scale: 0.02           # 0.01   - weighting for how much the controller should avoid obstacles
#   forward_point_distance: 0.325 # 0.325  - how far along to place an additional scoring point
#   stop_time_buffer: 0.2         # 0.2    - amount of time a robot must stop in before colliding for a valid traj.
#   scaling_speed: 0.25           # 0.25   - absolute velocity at which to start scaling the robot's footprint
#   max_scaling_factor: 0.2       # 0.2    - how much to scale the robot's footprint when at speed.

# # Oscillation Prevention Parameters
#   oscillation_reset_dist: 0.05  # 0.05   - how far to travel before resetting oscillation flags

# # Debugging
#   publish_traj_pc : true
#   publish_cost_grid_pc: true
#   # global_frame_id: odom


# # Differential-drive robot configuration - necessary?
#   # holonomic_robot: false

DWAPlannerROS:
  # Robot configuration parameters  
  acc_lim_x: 10 #10 12
  acc_lim_y: 0 #3
  acc_lim_th: 5.4 #5.4 6.4

  max_vel_x: 0.125 #0.3 0.5 0.125
  min_vel_x: -0.125 #-0.05
  max_vel_y: 0
  min_vel_y: 0
  max_vel_rot: 0.1
  min_vel_rot: -0.1

  max_trans_vel: 0.125 #0.3 0.5 0.125
  min_trans_vel: -0.125 #-0.05
  max_rot_vel: 0.1
  min_rot_vel: -0.1

  # Goal Tolerance Parameters
  yaw_goal_tolerance: 0.2 #0.1
  xy_goal_tolerance: 0.3 #.2
  latch_xy_goal_tolerance: false

  # # Forward Simulation Parameters
  sim_time: 2.0 #2.7 1.5 2.0 3.2
  # sim_granularity: 0.02
  vx_samples: 20 #commented 15 10 20 50
  vy_samples: 0 #commented
  vtheta_samples: 30 #commented 20
  # penalize_negative_x: true

  # # Trajectory scoring parameters
  path_distance_bias: 64.0 # The weighting for how much the controller should stay close to the path it was given
  goal_distance_bias: 10.0 # 32 The weighting for how much the controller should attempt to reach its local goal, also controls speed
  occdist_scale: 10 # 10 The weighting for how much the controller should attempt to avoid obstacles
  # forward_point_distance