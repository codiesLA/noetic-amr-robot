recovery_behavior_enabled: true
rotate_recovery: false
conservative_reset_dist: 0.2

GlobalPlanner:
  allow_unknown: true
  default_tolerance: 0.1 # A tolerance on the goal point for the planner. The planner will attempt to create a plan that is as close to the specified goal as possible but no further than default_tolerance away.
  visualize_potential: false # Specifies whether or not to visualize the potential area computed via a PointCloud2.
  use_dijkstra: true # If true, use dijkstra's algorithm. Otherwise, A*.
  use_quadratic: true # If true, use the quadratic approximation of the potential. Otherwise, use a simpler calculation.
  use_grid_path: true # If true, create a path that follows the grid boundaries. Otherwise, use a gradient descent method.
  old_navfn_behavior: true # If for some reason, you want global_planner to exactly mirror the behavior of navfn, set this to true (and use the defaults for the other boolean parameters)
  lethal_cost: 253 # Lethal Cost (dynamic reconfigure)
  neutral_cost: 50 # Neutral Cost (dynamic reconfigure)
  cost_factor: 5.0 # Factor to multiply each cost from costmap by (dynamic reconfigure)
  publish_potential: true # Publish Potential Costmap (dynamic reconfigure)
  orientation_mode: 0 # How to set the orientation of each point (None=0, Forward=1, Interpolate=2, ForwardThenInterpolate=3, Backward=4, Leftward=5, Rightward=6) (dynamic reconfigure)
  orientation_window_size: 1 # What window to use to determine the orientation based on the position derivative specified by the orientation mode (dynamic reconfigure)
  outline_map: true #Outlines the global costmap with lethal obstacles. For the usage of a non static (rolling window) global costmap this needs to be set to false

DWAPlannerROS:
  acc_lim_x: 1.5 # The x acceleration limit of the robot in meters/sec^2
  acc_lim_y: 0 # The y acceleration limit of the robot in meters/sec^2
  acc_lim_th: 1.5 # The rotational acceleration limit of the robot in radians/sec^2
  max_vel_trans: 0.35 # The absolute value of the maximum translational velocity for the robot in m/s
  min_vel_trans: 0.15 # The absolute value of the minimum translational velocity for the robot in m/s
  max_vel_x: 0.35 # The maximum x velocity for the robot in m/s.
  min_vel_x: 0.15 # The minimum x velocity for the robot in m/s, negative for backwards motion.
  max_vel_y: 0.0 # The maximum y velocity for the robot in m/s
  min_vel_y: 0.0 # The minimum y velocity for the robot in m/s
  max_rot_vel: 0.2 # The absolute value of the maximum rotational velocity for the robot in rad/s
  min_rot_vel: 0.1 # The absolute value of the minimum rotational velocity for the robot in rad/s
  yaw_goal_tolerance: 0.10 # The tolerance in radians for the controller in yaw/rotation when achieving its goal
  xy_goal_tolerance: 0.10 # The tolerance in meters for the controller in the x & y distance when achieving a goal
  latch_xy_goal_tolerance: false # If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so.
  sim_time: 1.0 # 2.0 The amount of time to forward-simulate trajectories in seconds
  sim_granularity: 0.1 # The step size, in meters, to take between points on a given trajectory
  vx_samples: 20 # The number of samples to use when exploring the x velocity space
  vy_samples: 0 # The number of samples to use when exploring the y velocity space
  vth_samples: 6 # The number of samples to use when exploring the theta velocity space
  controller_frequency: 20.0 # The frequency at which this controller will be called in Hz. Uses searchParam to read the parameter from parent namespaces if not set in the namespace of the controller. For use with move_base, this means that you only need to set its "controller_frequency" parameter and can safely leave this one unset.

# cost =
#   path_distance_bias * (distance to path from the endpoint of the trajectory in meters)
#   + goal_distance_bias * (distance to local goal from the endpoint of the trajectory in meters)
#   + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))
  path_distance_bias: 32.0 # The weighting for how much the controller should stay close to the path it was given
  goal_distance_bias: 24.0 # The weighting for how much the controller should attempt to reach its local goal, also controls speed
  occdist_scale: 10.0 # The weighting for how much the controller should attempt to avoid obstacles
  forward_point_distance: 0.1 #The distance from the center point of the robot to place an additional scoring point, in meters
  stop_time_buffer: 0.1 # The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds
  scaling_speed: 0.25 #The absolute value of the velocity at which to start scaling the robot's footprint, in m/s
  max_scaling_factor: 0.2 #The maximum factor to scale the robot's footprint by
  publish_cost_grid: true # Whether or not to publish the cost grid that the planner will use when planning. When true, a sensor_msgs/PointCloud2 will be available on the ~<name>/cost_cloud topic. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account.
  oscillation_reset_dist: 0.05 # How far the robot must travel in meters before oscillation flags are reset
  prune_plan: true # Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.
