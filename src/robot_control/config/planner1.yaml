recovery_behavior_enabled: true
rotate_recovery: true
conservative_reset_dist: 0.1

GlobalPlanner:
  allow_unknown: true
  default_tolerance: 0.1 # A tolerance on the goal point for the planner. The planner will attempt to create a plan that is as close to the specified goal as possible but no further than default_tolerance away.
  visualize_potential: true #* Specifies whether or not to visualize the potential area computed via a PointCloud2.
  use_dijkstra: true # If true, use dijkstra's algorithm. Otherwise, A*.
  use_quadratic: true # If true, use the quadratic approximation of the potential. Otherwise, use a simpler calculation.
  use_grid_path: false # If true, create a path that follows the grid boundaries. Otherwise, use a gradient descent method.
  old_navfn_behavior: false  #* If for some reason, you want global_planner to exactly mirror the behavior of navfn, set this to true (and use the defaults for the other boolean parameters)
  lethal_cost: 253  #* Lethal Cost (dynamic reconfigure)
  neutral_cost: 66  #* Neutral Cost (dynamic reconfigure)
  cost_factor: 0.2 #* Factor to multiply each cost from costmap by (dynamic reconfigure)
  publish_potential: true # Publish Potential Costmap (dynamic reconfigure)
  orientation_mode: 0 # How to set the orientation of each point (None=0, Forward=1, Interpolate=2, ForwardThenInterpolate=3, Backward=4, Leftward=5, Rightward=6) (dynamic reconfigure)
  orientation_window_size: 1 # What window to use to determine the orientation based on the position derivative specified by the orientation mode (dynamic reconfigure)
  outline_map: true #Outlines the global costmap with lethal obstacles. For the usage of a non static (rolling window) global costmap this needs to be set to false


base_local_planner: dwa_local_planner/DWAPlannerROS
DWAPlannerROS:
  acc_lim_x: 10
  acc_lim_y: 0
  acc_lim_th: 5.4

  max_vel_x: 0.2
  min_vel_x: -0.1
  max_vel_y: 0
  min_vel_y: 0

  max_trans_vel: 0.2
  min_trans_vel: -0.05
  max_rot_vel: 1.0
  min_rot_vel: 0.2

  # Goal Tolerance Parameters
  yaw_goal_tolerance: 0.3
  xy_goal_tolerance: 0.2
  latch_xy_goal_tolerance: false

  # # Forward Simulation Parameters
  sim_time: 3.0

  # Goal tolerance
  yaw_goal_tolerance: 0.05  # yaw_goal_tolerance > (sim_time * min_rot_vel) / 2 (from Navigation Tuning Guide)
  xy_goal_tolerance: 0.05   # xy_goal_tolerance  > (sim_time * min_vel_x)   / 2
  latch_xy_goal_tolerance: false
  controller_frequency: 3.0

  # Forward simulation
  # sim_time: 4.0 #*
  vx_samples: 20
  vy_samples: 1       # diff drive robot, there is only one sample
  vtheta_samples: 40
  sim_granularity: 0.025 #*

  # Trajectory scoring
  path_distance_bias: 32.0      # default: 32.0  mir: 32.0  - weighting for how much it should stick to the global path plan
  goal_distance_bias: 48.0      # default: 24.0  mir: 48.0  - weighting for how much it should attempt to reach its goal
  occdist_scale: 0.01            # default: 0.01  mir: 0.01  - weighting for how much the controller should avoid obstacles
  forward_point_distance: 0.325 # default: 0.325 mir: 0.325 - how far along to place an additional scoring point
  stop_time_buffer: 0.2         # default: 0.2   mir: 0.2   - amount of time a robot must stop before colliding for a valid traj.
  scaling_speed: 0.25           # default: 0.25  mir: 0.25  - absolute velocity at which to start scaling the robot's footprint
  max_scaling_factor: 0.2       # default: 0.2   mir: 0.2   - how much to scale the robot's footprint when at speed.
  prune_plan: true

  # Oscillation prevention
  oscillation_reset_dist: 0.05  # 0.05   - how far to travel before resetting oscillation flags, in m
  oscillation_reset_angle: 0.2  # 0.2    - the angle the robot must turn before resetting Oscillation flags, in rad

  # Debugging
  publish_traj_pc : true
  publish_cost_grid_pc: true
  global_frame_id: /odom  # or <robot namespace>/odom_comb